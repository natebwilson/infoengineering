#include "Arduino_LED_Matrix.h"

uint8_t frame[8][12] = {
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
};

//REFERENCE:
//OUTPUT 7 > A
//OUTPUT 6 > B
//OUTPUT 5 > C
//OUTPUT 4 > D
//OUTPUT 3 > E
//OUTPUT 2 > F
//OUTPUT 1 > G
//OUTPUT 0 > NULL

byte digit[10] = {  //Stores shift register binary sequences for each digit, digit[i] is the code for i.
  //00111111
  63,
  //00000110
  6,
  //01011011
  91,
  //01001111
  79,
  //01100110
  102,
  //01101101
  109,
  //01111101
  125,
  //00000111
  7,
  //01111111
  127,
  //01101111
  111
};


ArduinoLEDMatrix matrix;
int writeButton = 1;
int colButton = 2;
int rowButton = 3;
int dataPin = 9;
int clockPin = 10;
int latchPin = 11;
int lastWriteState;
int lastRowState;
int lastColState;
int matrixWrite = 0;
int writeState = LOW;
int rowState = LOW;
int colState = LOW;
int row;
int col;


void setup() {
  Serial.begin(9600);
  matrix.begin();
  pinMode(dataPin, OUTPUT);
  pinMode(clockPin, OUTPUT);
  pinMode(latchPin, OUTPUT);
  pinMode(writeButton, INPUT);
  pinMode(colButton, INPUT);
  pinMode(rowButton, INPUT);
}

void loop() {
  //Save the last button states
  lastWriteState = writeState;
  lastRowState = rowState;
  lastColState = colState;
  //Read new button states
  writeState = digitalRead(writeButton);
  rowState = digitalRead(rowButton);
  colState = digitalRead(colButton);


  if (lastWriteState == LOW && writeState == HIGH) {  // this part can be modified to use a bluetooth client.
    Serial.println("Write Received");
    frame[row][col] = !frame[row][col];
    row = 0;
    col = 0;
    matrixWrite = 1;
  }

  //Increments the row counter if the button is pressed, rolls back to zero if the current value is 8.
  if (lastRowState == LOW && rowState == HIGH) {
    Serial.println("Row Received");
    if (row == 7) {
      row = 0;
    } else {
      row++;
    }
  }

  //Increments the column counter if the button is pressed, rolls back to zero if the current value is 12.
  if (lastColState == LOW && colState == HIGH) {
    Serial.println("Column Received");
    if (col == 11) {
      col = 0;
    } else {
      col++;
    }
  }

  //Beginning of write sequence to cell selector
  //The display can't display four unique values, so we rapidly toggle on/off in sequence
  //Individual segments are activated when they are allowed to pass to ground, so we first shiftout a bit that enables each segment's transistor
  //We then shift out the digit binary for that segment, then we set the latch pin high, updating the outputs of the shift registers

  digitalWrite(latchPin, LOW);
  shiftOut(dataPin, clockPin, LSBFIRST, 64); // 64 = 00100000, allowing only segment one to ground
  shiftOut(dataPin, clockPin, LSBFIRST, digit[row + 1]);
  digitalWrite(latchPin, HIGH);

  digitalWrite(latchPin, LOW);
  shiftOut(dataPin, clockPin, LSBFIRST, 32); // 32 = 0001000, allowing only segment three to ground
  shiftOut(dataPin, clockPin, LSBFIRST, digit[(col + 1) / 10]);
  digitalWrite(latchPin, HIGH);

  digitalWrite(latchPin, LOW);
  shiftOut(dataPin, clockPin, LSBFIRST, 16); // 16 = 00001000, allowing only segment four to ground
  shiftOut(dataPin, clockPin, LSBFIRST, digit[((col + 1) % 10)]); 
  digitalWrite(latchPin, HIGH);

  //If a write was submitted from the cell selector, then we update the onboard led matrix

  if(matrixWrite){
    matrix.renderBitmap(frame);
    matrixWrite = 0;
  }
}
